import Foundation
import SwiftUI
import Combine
import SwiftData

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –ø—Ä–∞–∫—Ç–∏–∫
public class TemplateService {
    private let modelContext: ModelContext
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }
    
    // CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    
    func fetchTemplates() -> [PracticeTemplate] {
        let descriptor = FetchDescriptor<PracticeTemplate>()
        return (try? modelContext.fetch(descriptor)) ?? []
    }
    
    func getTemplate(byID id: UUID) -> PracticeTemplate? {
        let allTemplates = fetchTemplates()
        return allTemplates.first { template in
            template.id == id
        }
    }
    
    func getTemplate(byTemplateId templateId: String) -> PracticeTemplate? {
        let allTemplates = fetchTemplates()
        return allTemplates.first { template in
            template.templateId == templateId
        }
    }
    
    func saveTemplate(_ template: PracticeTemplate) {
        modelContext.insert(template)
        try? modelContext.save()
    }
    
    func deleteTemplate(_ template: PracticeTemplate) {
        modelContext.delete(template)
        try? modelContext.save()
    }
    
    func filteredTemplates(category: AskezaCategory? = nil, 
                          difficulty: Int? = nil, 
                          duration: Int? = nil, 
                          searchText: String = "",
                          includeActive: Bool = false,
                          progressService: ProgressService? = nil) -> [PracticeTemplate] {
        
        let templatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let allTemplates = (try? modelContext.fetch(templatesDescriptor)) ?? []
        
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ templateId
        var uniqueTemplates = [String: PracticeTemplate]()
        
        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ templateId
        for template in allTemplates {
            if !template.templateId.isEmpty {
                uniqueTemplates[template.templateId] = template
            } else {
                // –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –±–µ–∑ templateId –∏—Å–ø–æ–ª—å–∑—É–µ–º UUID –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞
                uniqueTemplates[template.id.uuidString] = template
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        var filteredTemplates = Array(uniqueTemplates.values)
        
        print("üîç TemplateService: –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: \(filteredTemplates.count)")
        if let category = category {
            print("üîç TemplateService: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: \(category.rawValue)")
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –∏ –µ—Å—Ç—å ProgressService, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∏—Ö
        if !includeActive, let progressService = progressService {
            filteredTemplates = filteredTemplates.filter { template in
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ ProgressService
                let status = progressService.getStatus(forTemplateID: template.id)
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                // –®–∞–±–ª–æ–Ω—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º .completed –∏ .mastered –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
                return status != .inProgress
            }
        }
        
        print("üîç TemplateService: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö: \(filteredTemplates.count)")
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
        let result = filteredTemplates.filter { template in
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
            if let category = category, template.category != category {
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
            if let difficulty = difficulty, template.difficulty != difficulty {
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞
            if let duration = duration, template.duration != duration {
                return false
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
            if !searchText.isEmpty {
                let matchesTitle = template.title.localizedStandardContains(searchText)
                let matchesDescription = template.practiceDescription.localizedStandardContains(searchText)
                let matchesIntention = template.intention.localizedStandardContains(searchText)
                
                if !(matchesTitle || matchesDescription || matchesIntention) {
                    return false
                }
            }
            
            return true
        }
        
        print("üîç TemplateService: –ö–æ–Ω–µ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: \(result.count) —à–∞–±–ª–æ–Ω–æ–≤")
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if result.isEmpty && category != nil && filteredTemplates.count > 0 {
            print("‚ö†Ô∏è TemplateService: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à.")
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            return filteredTemplates
        }
        
        return result
    }
    
    // –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ JSON
    func importTemplatesFromJSON(_ jsonData: Data) -> Bool {
        do {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º TemplateImport –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ PracticeTemplate –Ω–µ Decodable
            let templateImports = try JSONDecoder().decode([TemplateImport].self, from: jsonData)
            for templateData in templateImports {
                let template = templateData.toPracticeTemplate()
                saveTemplate(template)
            }
            return true
        } catch {
            print("Error importing templates: \(error)")
            return false
        }
    }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
public class ProgressService {
    private let modelContext: ModelContext
    private let userService: UserService
    
    init(modelContext: ModelContext, userService: UserService) {
        self.modelContext = modelContext
        self.userService = userService
    }
    
    func getProgress(forTemplateID templateID: UUID) -> TemplateProgress? {
        // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è UUID —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫–∞—Ç –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º —Å–ø–æ—Å–æ–±–æ–º
        let allProgress = (try? modelContext.fetch(FetchDescriptor<TemplateProgress>())) ?? []
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤ –∫–æ–¥–µ
        return allProgress.first { progress in
            progress.templateID == templateID
        }
    }
    
    func getStatus(forTemplateID templateID: UUID) -> TemplateStatus {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π
        let templatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let templates = (try? modelContext.fetch(templatesDescriptor)) ?? []
        
        // –ò—â–µ–º —à–∞–±–ª–æ–Ω —Å –Ω—É–∂–Ω—ã–º ID
        guard let template = templates.first(where: { $0.id == templateID }),
              let templateProgress = getProgress(forTemplateID: templateID) else {
            return .notStarted
        }
        
        return templateProgress.status(templateDuration: template.duration)
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –∏–∑ ProgressService.startTemplate,
    // –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥—É startTemplate –∏–∑ PracticeTemplateStore
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    
    func updateProgress(forTemplateID templateID: UUID, daysCompleted: Int, isCompleted: Bool = false) {
        if let existingProgress = getProgress(forTemplateID: templateID) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            existingProgress.daysCompleted = daysCompleted
            
            // –ï—Å–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–ª—Å—è –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            if isCompleted && !existingProgress.isProcessingCompletion {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                existingProgress.isProcessingCompletion = true
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
                existingProgress.timesCompleted += 1
                
                print("‚≠êÔ∏è ProgressService: –£–≤–µ–ª–∏—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID), —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: \(existingProgress.timesCompleted)")
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–¥–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                awardCompletionXP(forTemplateID: templateID)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∫—É—Ä—Å–µ
                checkAndAdvanceCourse(templateID: templateID)
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                DispatchQueue.main.async {
                    print("üì¢ ProgressService: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞")
                    NotificationCenter.default.post(name: .refreshWorkshopData, object: nil)
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                    existingProgress.isProcessingCompletion = false
                    print("üîÑ ProgressService: –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
                    
                    // –ï—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                    NotificationCenter.default.post(name: .refreshWorkshopData, object: nil)
                }
            }
            
            try? modelContext.save()
        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            let newProgress = TemplateProgress(
                templateID: templateID,
                dateStarted: Date(),
                daysCompleted: daysCompleted,
                timesCompleted: isCompleted ? 1 : 0
            )
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if isCompleted {
                newProgress.isProcessingCompletion = true
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                DispatchQueue.main.async {
                    print("üì¢ ProgressService: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º —à–∞–±–ª–æ–Ω–µ")
                    NotificationCenter.default.post(name: .refreshWorkshopData, object: nil)
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
                    newProgress.isProcessingCompletion = false
                    print("üîÑ ProgressService: –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
                    
                    // –ï—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞
                    NotificationCenter.default.post(name: .refreshWorkshopData, object: nil)
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ ModelContext
            modelContext.insert(newProgress)
            try? modelContext.save()
            
            // –ï—Å–ª–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            if isCompleted {
                awardCompletionXP(forTemplateID: templateID)
                checkAndAdvanceCourse(templateID: templateID)
            }
        }
    }
    
    func updateStreak(forTemplateID templateID: UUID, streak: Int) {
        if let existingProgress = getProgress(forTemplateID: templateID) {
            existingProgress.currentStreak = streak
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–∏–π —Å—Ç—Ä–∏–∫, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–æ–ª—å—à–µ
            if streak > existingProgress.bestStreak {
                existingProgress.bestStreak = streak
            }
            
            try? modelContext.save()
        }
    }
    
    func resetTemplateProgress(forTemplateID templateID: UUID) {
        if let existingProgress = getProgress(forTemplateID: templateID) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–±–ª–æ–Ω–∞, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
            existingProgress.daysCompleted = 0
            existingProgress.currentStreak = 0
            existingProgress.dateStarted = Date() // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
            existingProgress.isProcessingCompletion = false
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try? modelContext.save()
            
            print("üîÑ ProgressService: –°–±—Ä–æ—à–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID), —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(existingProgress.timesCompleted) –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π")
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            DispatchQueue.main.async {
                NotificationCenter.default.post(name: .refreshWorkshopData, object: nil)
            }
        }
    }
    
    // MARK: - Rewards and Gamification
    
    func awardCompletionXP(forTemplateID templateID: UUID) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π
        let templatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let templates = (try? modelContext.fetch(templatesDescriptor)) ?? []
        
        // –ò—â–µ–º —à–∞–±–ª–æ–Ω —Å –Ω—É–∂–Ω—ã–º ID
        guard let template = templates.first(where: { $0.id == templateID }),
              let progress = getProgress(forTemplateID: templateID) else {
            return
        }
        
        let status = progress.status(templateDuration: template.duration)
        var xpAmount = 0
        
        switch status {
        case .completed:
            // XP –∑–∞ –æ–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ = –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            xpAmount = template.duration
        case .mastered:
            // –¢—Ä–æ–π–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ
            xpAmount = template.duration * 3
        default:
            break
        }
        
        if xpAmount > 0 {
            userService.addXP(xpAmount)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã –ª–∏ –∞—á–∏–≤–º–µ–Ω—Ç—ã
        checkAchievements(forTemplate: template)
    }
    
    func checkAchievements(forTemplate template: PracticeTemplate) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å—ã
        let allProgressDescriptor = FetchDescriptor<TemplateProgress>()
        let allProgress = (try? modelContext.fetch(allProgressDescriptor)) ?? []
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        let allTemplatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let allTemplates = (try? modelContext.fetch(allTemplatesDescriptor)) ?? []
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        var completedInCategory = 0
        
        for progress in allProgress {
            if let progressTemplate = allTemplates.first(where: { $0.id == progress.templateID }),
               progressTemplate.category == template.category && 
               progress.status(templateDuration: progressTemplate.duration) == .completed {
                completedInCategory += 1
            }
        }
        
        if completedInCategory >= 5 {
            // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –æ–¥–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            userService.addXP(50)
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–¥–∞—á—É –º–µ–¥–∞–ª–∏
        }
    }
    
    // MARK: - Course Management
    
    func getNextTemplateInCourse(afterTemplateID templateID: UUID) -> PracticeTemplate? {
        // –ù–∞—Ö–æ–¥–∏–º –∫—É—Ä—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω
        let courseDescriptor = FetchDescriptor<CoursePath>()
        let courses = (try? modelContext.fetch(courseDescriptor)) ?? []
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        let templatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let allTemplates = (try? modelContext.fetch(templatesDescriptor)) ?? []
        
        // –ò—â–µ–º –∫—É—Ä—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        for course in courses {
            if let currentIndex = course.templateIDs.firstIndex(of: templateID),
               currentIndex + 1 < course.templateIDs.count {
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π ID —à–∞–±–ª–æ–Ω–∞
                let nextTemplateID = course.templateIDs[currentIndex + 1]
                
                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
                return allTemplates.first { template in
                    template.id == nextTemplateID
                }
            }
        }
        
        return nil
    }
    
    private func checkAndAdvanceCourse(templateID: UUID) {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫—É—Ä—Å—É
        if let nextTemplate = getNextTemplateInCourse(afterTemplateID: templateID) {
            // –ú–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            print("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω –≤ –∫—É—Ä—Å–µ: \(nextTemplate.title)")
        }
    }
    
    func getAllProgress() -> [TemplateProgress] {
        let progressDescriptor = FetchDescriptor<TemplateProgress>()
        return (try? modelContext.fetch(progressDescriptor)) ?? []
    }
    
    func deleteProgress(_ progress: TemplateProgress) {
        modelContext.delete(progress)
        try? modelContext.save()
    }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
public class UserService {
    private let modelContext: ModelContext
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        ensureUserProfileExists()
    }
    
    private func ensureUserProfileExists() {
        let descriptor = FetchDescriptor<UserProfile>()
        let profiles = (try? modelContext.fetch(descriptor)) ?? []
        
        if profiles.isEmpty {
            let newProfile = UserProfile(nickname: "–ê—Å–∫–µ—Ç")
            modelContext.insert(newProfile)
            try? modelContext.save()
        }
    }
    
    func getUserProfile() -> UserProfile? {
        let descriptor = FetchDescriptor<UserProfile>()
        return (try? modelContext.fetch(descriptor).first)
    }
    
    func updateUserProfile(nickname: String? = nil, avatarURL: URL? = nil) {
        if let profile = getUserProfile() {
            if let nickname = nickname {
                profile.nickname = nickname
            }
            
            if let avatarURL = avatarURL {
                profile.avatarURL = avatarURL
            }
            
            try? modelContext.save()
        }
    }
    
    func addXP(_ amount: Int) {
        if let profile = getUserProfile() {
            let oldLevel = profile.level
            profile.addXP(amount)
            
            try? modelContext.save()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
            if profile.level > oldLevel {
                // TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è
                print("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è \(profile.level)!")
            }
        }
    }
}

// –°–µ—Ä–≤–∏—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
public class RecommendationEngine {
    private let modelContext: ModelContext
    
    init(modelContext: ModelContext) {
        self.modelContext = modelContext
    }
    
    func getRecommendedTemplates(limit: Int = 3) -> [PracticeTemplate] {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
        let allTemplatesDescriptor = FetchDescriptor<PracticeTemplate>()
        let allTemplates = (try? modelContext.fetch(allTemplatesDescriptor)) ?? []
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–µ limit —à–∞–±–ª–æ–Ω–æ–≤
        // TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è Askeza –≤ —Å—Ö–µ–º—É SwiftData
        let recommendations = allTemplates.prefix(limit)
        return Array(recommendations)
    }
}

// Dependency Resolver –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
public class ServiceResolver {
    public static let shared = ServiceResolver()
    
    private var modelContext: ModelContext
    private var services: [String: Any] = [:]
    
    private init() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä SwiftData
        let schema = Schema([
            PracticeTemplate.self,
            TemplateProgress.self,
            CoursePath.self,
            UserProfile.self,
            // –£–±–∏—Ä–∞–µ–º Askeza, —Ç–∞–∫ –∫–∞–∫ —Å–µ–π—á–∞—Å –æ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç PersistentModel
            // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –µ–µ –≤ SwiftData, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Askeza
        ])
        
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)
        let container = try! ModelContainer(for: schema, configurations: [modelConfiguration])
        self.modelContext = ModelContext(container)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        registerServices()
    }
    
    private func registerServices() {
        let userService = UserService(modelContext: modelContext)
        services["UserService"] = userService
        
        let templateService = TemplateService(modelContext: modelContext)
        services["TemplateService"] = templateService
        
        let progressService = ProgressService(modelContext: modelContext, userService: userService)
        services["ProgressService"] = progressService
        
        let recommendationEngine = RecommendationEngine(modelContext: modelContext)
        services["RecommendationEngine"] = recommendationEngine
    }
    
    public func resolve<T>(_ type: T.Type) -> T? {
        let key = String(describing: type)
        print("Resolving service with key: \(key)")
        return services[key] as? T
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PracticeTemplateStore, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
public class PracticeTemplateStore: ObservableObject {
    @Published public var templates: [PracticeTemplate] = []
    @Published public var progress: [TemplateProgress] = []
    @Published public var courses: [CoursePath] = []
    @Published public var userProfile: UserProfile?
    
    private let templateService: TemplateService
    private let progressService: ProgressService
    private let userService: UserService
    private let recommendationEngine: RecommendationEngine
    private(set) public var modelContext: ModelContext
    
    public static let shared = PracticeTemplateStore()
    
    private init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ —Å–µ—Ä–≤–∏—Å—ã, –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Ö —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
        guard let templateService = ServiceResolver.shared.resolve(TemplateService.self),
              let progressService = ServiceResolver.shared.resolve(ProgressService.self),
              let userService = ServiceResolver.shared.resolve(UserService.self),
              let recommendationEngine = ServiceResolver.shared.resolve(RecommendationEngine.self) else {
            // –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ServiceResolver
            print("Warning: Services not found, initializing new resolver")
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä SwiftData
            let schema = Schema([
                PracticeTemplate.self,
                TemplateProgress.self,
                CoursePath.self,
                UserProfile.self
            ])
            
            let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)
            let container = try! ModelContainer(for: schema, configurations: [modelConfiguration])
            let modelContext = ModelContext(container)
            
            // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–≤–∏—Å—ã –Ω–∞–ø—Ä—è–º—É—é
            let userService = UserService(modelContext: modelContext)
            let templateService = TemplateService(modelContext: modelContext)
            let progressService = ProgressService(modelContext: modelContext, userService: userService)
            let recommendationEngine = RecommendationEngine(modelContext: modelContext)
            
            self.templateService = templateService
            self.progressService = progressService
            self.userService = userService
            self.recommendationEngine = recommendationEngine
            self.modelContext = modelContext
            
            loadData()
            return
        }
        
        // –ï—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –∏ –ø–æ–ª—É—á–∞–µ–º modelContext –∏–∑ ServiceResolver
        self.templateService = templateService
        self.progressService = progressService
        self.userService = userService
        self.recommendationEngine = recommendationEngine
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä SwiftData –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è modelContext
        let schema = Schema([
            PracticeTemplate.self,
            TemplateProgress.self,
            CoursePath.self,
            UserProfile.self
        ])
        
        let modelConfiguration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: false)
        let container = try! ModelContainer(for: schema, configurations: [modelConfiguration])
        self.modelContext = ModelContext(container)
        
        loadData()
    }
    
    // MARK: - Data Management
    
    private func loadData() {
        templates = templateService.fetchTemplates()
        
        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        if templates.isEmpty {
            createDemoTemplates()
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤
        cleanupDuplicateTemplates()
        
        userProfile = userService.getUserProfile()
        
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        validateTemplates()
    }
    
    // MARK: - Template Management
    
    public func addTemplate(_ template: PracticeTemplate) {
        templateService.saveTemplate(template)
        templates = templateService.fetchTemplates()
    }
    
    public func getTemplate(byID id: UUID) -> PracticeTemplate? {
        return templateService.getTemplate(byID: id)
    }
    
    public func getTemplate(byTemplateId templateId: String) -> PracticeTemplate? {
        return templateService.getTemplate(byTemplateId: templateId)
    }
    
    public func filteredTemplates(category: AskezaCategory? = nil, 
                                difficulty: Int? = nil, 
                                duration: Int? = nil,
                                searchText: String = "",
                                includeActive: Bool = false) -> [PracticeTemplate] {
        return templateService.filteredTemplates(
            category: category,
            difficulty: difficulty,
            duration: duration,
            searchText: searchText,
            includeActive: includeActive,
            progressService: progressService
        )
    }
    
    // MARK: - Progress Management
    
    public func getProgress(forTemplateID templateID: UUID) -> TemplateProgress? {
        return progressService.getProgress(forTemplateID: templateID)
    }
    
    public func getAllProgress() -> [TemplateProgress] {
        return progressService.getAllProgress()
    }
    
    public func getStatus(forTemplateID templateID: UUID) -> TemplateStatus {
        return progressService.getStatus(forTemplateID: templateID)
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —à–∞–±–ª–æ–Ω–∞
    public func getOrCreateProgress(forTemplateID templateID: UUID) -> TemplateProgress {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        if let existingProgress = getProgress(forTemplateID: templateID) {
            print("‚úÖ PracticeTemplateStore: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
            return existingProgress
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let newProgress = TemplateProgress(templateID: templateID)
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–±–ª–æ–Ω–µ, –µ—Å–ª–∏ –º–æ–∂–µ–º
        if let template = getTemplate(byID: templateID) {
            print("‚úÖ PracticeTemplateStore: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞: \(template.title)")
        } else {
            print("‚ö†Ô∏è PracticeTemplateStore: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        modelContext.insert(newProgress)
        try? modelContext.save()
        
        return newProgress
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å–∫–µ–∑—ã
    public func startTemplate(_ template: PracticeTemplate) -> Askeza? {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
        guard validateTemplateDuration(template) else {
            print("‚ùå PracticeTemplateStore: –®–∞–±–ª–æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, –æ—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å–∫–µ–∑—ã")
            return nil
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞
        let templateProgress = getOrCreateProgress(forTemplateID: template.id)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —à–∞–±–ª–æ–Ω–∞
        let status = templateProgress.status(templateDuration: template.duration)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        if status == .inProgress {
            print("‚ö†Ô∏è PracticeTemplateStore: –®–∞–±–ª–æ–Ω '\(template.title)' —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç")
            return nil
        }
        
        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –±—ã–ª —Ä–∞–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –æ—Å–≤–æ–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        if status == .completed || status == .mastered {
            print("‚úÖ PracticeTemplateStore: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ '\(template.title)' (—Å—Ç–∞—Ç—É—Å: \(status.rawValue))")
        }
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –∑–∞–ø—É—â–µ–Ω
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        templateProgress.dateStarted = Date()
        templateProgress.daysCompleted = 0
        templateProgress.isProcessingCompletion = false
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        try? modelContext.save()
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–π –∞—Å–∫–µ–∑—ã
        let isLifetimeAskeza = UserDefaults.standard.bool(forKey: "createLifetimeAskeza")
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Å–∫–µ–∑—ã
        let askezaDuration: AskezaDuration
        if isLifetimeAskeza || template.duration == 0 {
            askezaDuration = .lifetime
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            UserDefaults.standard.set(false, forKey: "createLifetimeAskeza")
        } else {
            askezaDuration = .days(template.duration)
        }
        
        // –°–æ–∑–¥–∞–µ–º –∞—Å–∫–µ–∑—É –∏–∑ —à–∞–±–ª–æ–Ω–∞
        let askeza = Askeza(
            id: UUID(),  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID
            title: template.title,
            intention: template.intention,
            startDate: Date(),
            duration: askezaDuration,
            progress: 0,
            isCompleted: false,
            category: template.category,
            templateID: template.id  // –°–≤—è–∑—ã–≤–∞–µ–º Askeza —Å —à–∞–±–ª–æ–Ω–æ–º
        )
        
        print("üÜï PracticeTemplateStore: –°–æ–∑–¥–∞–Ω–∞ –∞—Å–∫–µ–∑–∞: \(askeza.title), ID: \(askeza.id), templateID: \(askeza.templateID?.uuidString ?? "–Ω–µ—Ç"), –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(isLifetimeAskeza ? "–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è" : String(template.duration) + " –¥–Ω–µ–π")")
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∞—Å–∫–µ–∑—É –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return askeza
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∏ –µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private func validateTemplateDuration(_ template: PracticeTemplate) -> Bool {
        // –ò—â–µ–º —á–∏—Å–ª–æ –¥–Ω–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞
        let title = template.title
        let durationValue = template.duration
        
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∏—Å–ª–∞ –¥–Ω–µ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7 –¥–Ω–µ–π", "14-–¥–Ω–µ–≤–Ω—ã–π", "30 –¥–Ω–µ–π")
        let pattern = "(\\d+)[ -]*(–¥–Ω–µ–π|–¥–Ω—è|–¥–µ–Ω—å|–¥–Ω–µ–≤–Ω—ã–π)"
        
        do {
            let regex = try NSRegularExpression(pattern: pattern, options: [])
            let nsString = title as NSString
            let matches = regex.matches(in: title, options: [], range: NSRange(location: 0, length: nsString.length))
            
            if !matches.isEmpty, let match = matches.first {
                let dayRange = match.range(at: 1)
                if dayRange.location != NSNotFound, let daysInTitle = Int(nsString.substring(with: dayRange)) {
                    // –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—é duration
                    if daysInTitle != durationValue && durationValue != 0 { // 0 = lifetime
                        print("‚ö†Ô∏è PracticeTemplateStore: –í –Ω–∞–∑–≤–∞–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–æ \(daysInTitle) –¥–Ω–µ–π, –Ω–æ –≤ duration = \(durationValue)")
                        return false
                    }
                }
            }
            
            // –ï—Å–ª–∏ —É –Ω–∞—Å –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –∞—Å–∫–µ–∑–∞ (duration = 0)
            if durationValue == 0 && (title.contains("–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ") || title.contains("–ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ")) {
                return true
            }
            
            // –ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –Ω–µ—Ç —á–∏—Å–ª–∞ –¥–Ω–µ–π, –∏–ª–∏ —á–∏—Å–ª–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç duration, –∏–ª–∏ —ç—Ç–æ "–ì–æ–¥" (365 –¥–Ω–µ–π)
            if title.contains("–ì–æ–¥") && durationValue == 365 {
                return true
            }
            
            return true
        } catch {
            print("‚ùå PracticeTemplateStore: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: \(error)")
            return true // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
    }
    
    public func updateProgress(forTemplateID templateID: UUID, daysCompleted: Int, isCompleted: Bool = false) {
        progressService.updateProgress(forTemplateID: templateID, daysCompleted: daysCompleted, isCompleted: isCompleted)
    }
    
    public func updateStreak(forTemplateID templateID: UUID, streak: Int) {
        progressService.updateStreak(forTemplateID: templateID, streak: streak)
    }
    
    public func resetTemplateProgress(_ templateID: UUID) {
        progressService.resetTemplateProgress(forTemplateID: templateID)
    }
    
    // MARK: - Course Management
    
    public func getNextTemplateInCourse(afterTemplateID templateID: UUID) -> PracticeTemplate? {
        return progressService.getNextTemplateInCourse(afterTemplateID: templateID)
    }
    
    // MARK: - Recommendations
    
    public func getRecommendedTemplates(limit: Int = 3) -> [PracticeTemplate] {
        return recommendationEngine.getRecommendedTemplates(limit: limit)
    }
    
    // MARK: - User Profile
    
    public func addXP(_ amount: Int) {
        userService.addXP(amount)
        userProfile = userService.getUserProfile()
    }
    
    public func updateUserProfile(nickname: String? = nil, avatarURL: URL? = nil) {
        userService.updateUserProfile(nickname: nickname, avatarURL: avatarURL)
        userProfile = userService.getUserProfile()
    }
    
    // MARK: - Demo Data
    
    private func createDemoTemplates() {
        // –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏–∑ JSON —Ñ–∞–π–ª–∞
        if !importTemplatesFromJSONFile() {
            // –ï—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
            createBasicTemplates()
        }
    }
    
    private func importTemplatesFromJSONFile() -> Bool {
        guard let url = Bundle.main.url(forResource: "Templates", withExtension: "json") else {
            print("Templates.json file not found in bundle")
            return false
        }
        
        do {
            let data = try Data(contentsOf: url)
            let decoder = JSONDecoder()
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º TemplateImport –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Decodable
            let templateImports = try decoder.decode([TemplateImport].self, from: data)
            
            for templateData in templateImports {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PracticeTemplate –∏–∑ TemplateImport
                let template = templateData.toPracticeTemplate()
                templateService.saveTemplate(template)
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é —à–∞–±–ª–æ–Ω–æ–≤
            templates = templateService.fetchTemplates()
            
            // –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            createCoursesFromTemplates()
            
            return true
        } catch {
            print("Error importing templates from JSON: \(error)")
            return false
        }
    }
    
    private func createCoursesFromTemplates() {
        // –ü—É—Ç—å –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Ç–µ–ª–∞
        let bodyTemplates = templates.filter { $0.category == .telo }
        if bodyTemplates.count >= 2 {
            let _ = CoursePath(
                title: "–ü—É—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞",
                description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏.",
                templateIDs: Array(bodyTemplates.prefix(3).map { $0.id }),
                category: .telo,
                difficulty: 2
            )
            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        }
        
        // –ü—É—Ç—å —è—Å–Ω–æ–≥–æ —É–º–∞
        let mindTemplates = templates.filter { $0.category == .um }
        if mindTemplates.count >= 2 {
            let _ = CoursePath(
                title: "–ü—É—Ç—å —è—Å–Ω–æ–≥–æ —É–º–∞",
                description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–º–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏—è.",
                templateIDs: Array(mindTemplates.prefix(3).map { $0.id }),
                category: .um,
                difficulty: 2
            )
            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        }
        
        // –ü—É—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
        let liberationTemplates = templates.filter { $0.category == .osvobozhdenie }
        if liberationTemplates.count >= 2 {
            let _ = CoursePath(
                title: "–ü—É—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è",
                description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∏–∑–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
                templateIDs: Array(liberationTemplates.prefix(3).map { $0.id }),
                category: .osvobozhdenie,
                difficulty: 3
            )
            // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ JSON
    private func createBasicTemplates() {
        let coldShower = PracticeTemplate(
            templateId: "cold-shower-14",
            title: "14-–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –¥—É—à–∞",
            category: .telo,
            duration: 14,
            quote: "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –º–∞—Ç—å —Å–≤–æ–±–æ–¥—ã.",
            difficulty: 2,
            description: "–ü–æ–±–µ–¥–∞ –Ω–∞–¥ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ. –ù–∞—á–Ω–∏—Ç–µ —Å 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è.",
            intention: "–£–∫—Ä–µ–ø–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç"
        )
        
        let meditation = PracticeTemplate(
            templateId: "daily-meditation-21",
            title: "21 –¥–µ–Ω—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
            category: .um,
            duration: 21,
            quote: "–¢—ã ‚Äî —ç—Ç–æ —Ç–∏—à–∏–Ω–∞ –º–µ–∂–¥—É –º—ã—Å–ª—è–º–∏.",
            difficulty: 1,
            description: "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –ù–∞—á–Ω–∏—Ç–µ —Å 5 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º.",
            intention: "–û–±—Ä–µ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∫–æ–π –∏ —è—Å–Ω–æ—Å—Ç—å –º—ã—à–ª–µ–Ω–∏—è"
        )
        
        let noSugar = PracticeTemplate(
            templateId: "no-sugar-30",
            title: "30 –¥–Ω–µ–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞",
            category: .osvobozhdenie,
            duration: 30,
            quote: "–°–ª–∞–¥–∫–∞—è –∂–∏–∑–Ω—å –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–∞—Ö–∞—Ä–µ.",
            difficulty: 3,
            description: "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–¥–æ—Å—Ç–µ–π –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Å–∞—Ö–∞—Ä–∞ —Ä–∞–¥–∏ —ç–Ω–µ—Ä–≥–∏–∏ –∏ —è—Å–Ω–æ—Å—Ç–∏.",
            intention: "–û–±—Ä–µ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ø–∏—Ç–∞–Ω–∏–µ–º –∏ —É–ª—É—á—à–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é"
        )
        
        let gratitude = PracticeTemplate(
            templateId: "gratitude-practice-7",
            title: "7 –¥–Ω–µ–π –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
            category: .dukh,
            duration: 7,
            quote: "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–æ, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å, –≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ.",
            difficulty: 1,
            description: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã.",
            intention: "–ö—É–ª—å—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á—É–≤—Å—Ç–≤–æ —Å—á–∞—Å—Ç—å—è –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
        )
        
        let digitalDetox = PracticeTemplate(
            templateId: "digital-detox-7",
            title: "7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞",
            category: .osvobozhdenie,
            duration: 7,
            quote: "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å.",
            difficulty: 2,
            description: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–æ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
            intention: "–í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤–æ–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º"
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω—ã
        addTemplate(coldShower)
        addTemplate(meditation)
        addTemplate(noSugar)
        addTemplate(gratitude)
        addTemplate(digitalDetox)
        
        // –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å—ã
        let _ = CoursePath(
            title: "–ü—É—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞",
            description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Ç–µ–ª–∞ –∏ —ç–Ω–µ—Ä–≥–∏–∏.",
            templateIDs: [coldShower.id, noSugar.id],
            category: .telo,
            difficulty: 2
        )
        
        let _ = CoursePath(
            title: "–ü—É—Ç—å —è—Å–Ω–æ–≥–æ —É–º–∞",
            description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–º–∞ –∏ –≤–Ω–∏–º–∞–Ω–∏—è.",
            templateIDs: [meditation.id, gratitude.id],
            category: .um,
            difficulty: 2
        )
        
        // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É—Ä—Å—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    func preloadTemplateData(for templateID: String) {
        print("‚¨áÔ∏è PracticeTemplateStore - –ù–∞—á–∞—Ç–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
        
        // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ —à–∞–±–ª–æ–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        var template: PracticeTemplate?
        let isDigitalDetox = templateID.contains("digital-detox") || templateID.contains("—Ü–∏—Ñ—Ä–æ–≤")
        
        // –î–ª—è —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID
        let templateIdToUse = isDigitalDetox ? "digital-detox-7" : templateID
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        template = getTemplate(byTemplateId: templateIdToUse)
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ templateId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
        if template == nil {
            if templateID.contains("iron-discipline") || templateID.contains("–∂–µ–ª–µ–∑–Ω") {
                // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "–ì–æ–¥ –∂–µ–ª–µ–∑–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã"
                template = templates.first(where: { $0.title.contains("–∂–µ–ª–µ–∑–Ω–æ–π") || $0.title.contains("Iron Discipline") })
                print("‚ö†Ô∏è PracticeTemplateStore - –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è '–ì–æ–¥ –∂–µ–ª–µ–∑–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã'")
            } else if templateID.contains("vegetarian") || templateID.contains("–≤–µ–≥–µ—Ç") {
                // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ"
                template = templates.first(where: { $0.title.contains("–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ") || $0.title.contains("Vegetarian") })
                print("‚ö†Ô∏è PracticeTemplateStore - –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å—Ç–≤–æ'")
            } else if isDigitalDetox {
                // –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è "7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞"
                template = templates.first(where: { $0.title.contains("—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ") || $0.title.contains("digital detox") })
                print("‚ö†Ô∏è PracticeTemplateStore - –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –¥–ª—è '7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞'")
                
                // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                if template == nil {
                    print("üî® PracticeTemplateStore - –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω '7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞'")
                    
                    // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
                    let digitalDetoxUUID = UUID()
                    print("üîë PracticeTemplateStore - –ù–∞–∑–Ω–∞—á–µ–Ω UUID –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞: \(digitalDetoxUUID)")
                    
                    let digitalDetox = PracticeTemplate(
                        id: digitalDetoxUUID,
                        templateId: "digital-detox-7",
                        title: "7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞",
                        category: .osvobozhdenie,
                        duration: 7,
                        quote: "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å.",
                        difficulty: 2,
                        description: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–æ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
                        intention: "–í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤–æ–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º"
                    )
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
                    addTemplate(digitalDetox)
                    print("‚úÖ PracticeTemplateStore - –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞")
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
                    template = digitalDetox
                    
                    // –§–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
                    templates = templateService.fetchTemplates()
                }
            }
        }
        
        // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if let template = template {
            print("‚úÖ PracticeTemplateStore - –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω: \(template.title), UUID: \(template.id)")
            
            // –î–ª—è —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if isDigitalDetox {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ templateId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if template.templateId != "digital-detox-7" {
                    print("‚ö†Ô∏è PracticeTemplateStore - –ò—Å–ø—Ä–∞–≤–ª—è–µ–º templateId –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞")
                    template.templateId = "digital-detox-7"
                }
            }
            
            // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            let progress = getProgress(forTemplateID: template.id)
            if let progress = progress {
                print("‚úÖ PracticeTemplateStore - –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω: \(progress.daysCompleted) –¥–Ω–µ–π")
            } else {
                print("‚ÑπÔ∏è PracticeTemplateStore - –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            }
            
            // –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∂–µ–Ω
            let status = getStatus(forTemplateID: template.id)
            print("‚úÖ PracticeTemplateStore - –°—Ç–∞—Ç—É—Å: \(status.displayText)")
        } else {
            print("‚ùå PracticeTemplateStore - –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID: \(templateID)")
            
            // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print("üìã PracticeTemplateStore - –î–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã:")
            for (index, availableTemplate) in templates.prefix(5).enumerated() {
                print("  \(index + 1). \(availableTemplate.title) (ID: \(availableTemplate.templateId))")
            }
            if templates.count > 5 {
                print("  ... –∏ –µ—â–µ \(templates.count - 5) —à–∞–±–ª–æ–Ω–æ–≤")
            }
        }
    }
    
    public func resetAllTemplateProgress() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å—ã —á–µ—Ä–µ–∑ progressService
        let allProgressArray = progressService.getAllProgress()
        
        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
        for progress in allProgressArray {
            progressService.deleteProgress(progress)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–≤
        self.progress = []
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —à–∞–±–ª–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–∑ AskezaViewModel
    public func updateProgress(templateID: UUID, isCompleted: Bool, daysCompleted: Int) {
        updateProgress(forTemplateID: templateID, daysCompleted: daysCompleted, isCompleted: isCompleted)
    }
    
    // MARK: - Template Validation
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public func validateTemplates() {
        print("üîç PracticeTemplateStore: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —à–∞–±–ª–æ–Ω–æ–≤ (\(templates.count) —à—Ç.)")
        
        var invalidTemplates = 0
        
        for template in templates {
            if !template.validateDuration() {
                invalidTemplates += 1
                print("‚ö†Ô∏è PracticeTemplateStore: –®–∞–±–ª–æ–Ω —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º: \(template.title) (ID: \(template.templateId))")
                print("   - duration: \(template.duration)")
            }
        }
        
        if invalidTemplates > 0 {
            print("‚ö†Ô∏è PracticeTemplateStore: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ \(invalidTemplates) —à–∞–±–ª–æ–Ω–æ–≤ —Å –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
        } else {
            print("‚úÖ PracticeTemplateStore: –í—Å–µ —à–∞–±–ª–æ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã")
        }
    }

    // MARK: - Cleaning and Maintenance Methods

    /// –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã
    public func resetAllTemplates() {
        print("üßπ PracticeTemplateStore: –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –∏–∑ modelContext
        for template in templates {
            modelContext.delete(template)
        }
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
        templates = []
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try? modelContext.save()
        
        print("‚úÖ PracticeTemplateStore: –í—Å–µ —à–∞–±–ª–æ–Ω—ã —É–¥–∞–ª–µ–Ω—ã")
    }

    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ templateId
    public func cleanupDuplicateTemplates() {
        print("üßπ PracticeTemplateStore: –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤")
        
        var uniqueTemplateIds = Set<String>()
        var templatesWithUniqueIds: [PracticeTemplate] = []
        var duplicatesCount = 0
        
        for template in templates {
            // –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å —Ç–∞–∫–∏–º templateId –µ—â–µ –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if !uniqueTemplateIds.contains(template.templateId) {
                uniqueTemplateIds.insert(template.templateId)
                templatesWithUniqueIds.append(template)
            } else {
                duplicatesCount += 1
                print("‚ö†Ô∏è PracticeTemplateStore: –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —à–∞–±–ª–æ–Ω–∞: \(template.title) (ID: \(template.templateId))")
            }
        }
        
        if duplicatesCount > 0 {
            print("üîÑ PracticeTemplateStore: –£–¥–∞–ª–µ–Ω–æ \(duplicatesCount) –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤")
            templates = templatesWithUniqueIds
            try? modelContext.save()
        } else {
            print("‚úÖ PracticeTemplateStore: –î—É–±–ª–∏–∫–∞—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —à–∞–±–ª–æ–Ω–∞
    public func updateTemplateStartDate(_ templateID: UUID, newStartDate: Date) {
        guard let templateProgress = getProgress(forTemplateID: templateID) else {
            print("‚ö†Ô∏è PracticeTemplateStore.updateTemplateStartDate: –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
            return
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
        templateProgress.dateStarted = newStartDate
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try? modelContext.save()
        
        print("‚úÖ PracticeTemplateStore.updateTemplateStartDate: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ID: \(templateID)")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
        DispatchQueue.main.async {
            NotificationCenter.default.post(
                name: .refreshWorkshopData,
                object: nil
            )
        }
    }

    // Method to save the changes in the model context
    public func saveContext() {
        // Save all changes in the context
        try? modelContext.save()
        print("‚úÖ PracticeTemplateStore: Context changes saved")
        
        // Notify about data changes
        DispatchQueue.main.async {
            NotificationCenter.default.post(
                name: .refreshWorkshopData,
                object: nil
            )
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ JSON
struct TemplateImport: Codable {
    let id: String
    let templateId: String
    let title: String
    let category: String
    let duration: Int
    let quote: String
    let difficulty: Int
    let description: String
    let intention: String
    
    func toPracticeTemplate() -> PracticeTemplate {
        return PracticeTemplate(
            id: UUID(uuidString: id) ?? UUID(),
            templateId: templateId,
            title: title,
            category: AskezaCategory.fromString(category),
            duration: duration,
            quote: quote,
            difficulty: difficulty,
            description: description,
            intention: intention
        )
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ enum
extension AskezaCategory {
    static func fromString(_ string: String) -> AskezaCategory {
        switch string.lowercased() {
        case "telo":
            return .telo
        case "um":
            return .um
        case "dukh":
            return .dukh
        case "otnosheniya":
            return .otnosheniya
        case "osvobozhdenie":
            return .osvobozhdenie
        case "velikie":
            return .velikie
        default:
            return .custom
        }
    }
}