//
//  AskezaApp.swift
//  Askeza
//
//  Created by LIH√ò on 02.05.2023.
//

import SwiftUI
import OSLog

@main
struct AskezaApp: App {
    @StateObject private var viewModel = AskezaViewModel()
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è Apple Developer Program
    // @StateObject private var authModel = AuthenticationViewModel()
    @Environment(\.scenePhase) private var scenePhase
    @State private var progressCheckTimer: Timer?
    @State private var midnightCheckTimer: Timer?
    @State private var currentDay = Calendar.current.component(.day, from: Date())
    @State private var isFirstLaunch = true
    
    // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    private let logger = Logger(subsystem: "com.liho.askeza", category: "AppLifecycle")
    
    var body: some Scene {
        WindowGroup {
            MainView()
                .environmentObject(viewModel)
                // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è Apple Developer Program
                // .environmentObject(authModel)
                .preferredColorScheme(.dark)
                .onAppear {
                    if isFirstLaunch {
                        logger.debug("üöÄ App did launch")
                        isFirstLaunch = false
                        
                        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –∞—Å–∫–µ–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                        let templateStore = PracticeTemplateStore.shared
                        AdditionalTemplates.addTemplates(to: templateStore)
                        logger.debug("üìã Templates added to store")
                    }
                    
                    // –ú—ã –º–æ–∂–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Å–∫–µ–∑
                    progressCheckTimer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { _ in
                        Task { @MainActor in
                            self.viewModel.updateAskezaStates()
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã –¥–Ω—è
                    midnightCheckTimer = Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { _ in
                        Task { @MainActor in
                            self.checkDayChange()
                        }
                    }
                    
                    // –ß—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    Task { @MainActor in
                        viewModel.updateAskezaStates()
                    }
                }
                .onChange(of: scenePhase) { oldPhase, newPhase in
                    if newPhase == .active {
                        logger.debug("üèÉ‚Äç‚ôÇÔ∏è App became active")
                        Task { @MainActor in
                            viewModel.updateAskezaStates()
                        }
                    } else if newPhase == .inactive {
                        logger.debug("‚è∏ App became inactive")
                    } else if newPhase == .background {
                        logger.debug("üîô App entered background")
                    }
                }
        }
    }
    
    @MainActor
    private func checkDayChange() {
        let today = Calendar.current.component(.day, from: Date())
        if today != currentDay {
            currentDay = today
            logger.debug("üìÖ Day changed to \(today), updating askeza states")
            viewModel.updateAskezaStates()
        }
    }
}

// MARK: - App Configuration
extension Bundle {
    static func configureApp() {
        if let bundleIdentifier = Bundle.main.bundleIdentifier {
            UserDefaults.standard.set("–ê—Å–∫–µ–∑–∞", forKey: "\(bundleIdentifier).displayName")
        }
    }
}

