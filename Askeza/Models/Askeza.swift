import Foundation
import SwiftUI

// MARK: - Notification Names
public extension Notification.Name {
    static let addAskeza = Notification.Name("AddAskezaNotification")
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ Int, –¥–æ–±–∞–≤–ª—è—é—â–µ–µ —Å–≤–æ–π—Å—Ç–≤–æ daysString
extension Int {
    var daysString: String {
        let lastDigit = self % 10
        let lastTwoDigits = self % 100
        
        if lastTwoDigits >= 11 && lastTwoDigits <= 19 {
            return "–¥–Ω–µ–π"
        }
        
        switch lastDigit {
        case 1:
            return "–¥–µ–Ω—å"
        case 2, 3, 4:
            return "–¥–Ω—è"
        default:
            return "–¥–Ω–µ–π"
        }
    }
}

public enum AskezaDuration: Codable, Equatable {
    case days(Int)
    case lifetime
    
    public var description: String {
        switch self {
        case .days(let count):
            return "\(count) –¥–Ω–µ–π"
        case .lifetime:
            return "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ (‚àû)"
        }
    }
    
    // –Ø–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ Hashable
    public func hash(into hasher: inout Hasher) {
        switch self {
        case .days(let count):
            hasher.combine(0) // 0 - —Ç–µ–≥ –¥–ª—è case days
            hasher.combine(count)
        case .lifetime:
            hasher.combine(1) // 1 - —Ç–µ–≥ –¥–ª—è case lifetime
        }
    }
}

public enum WishStatus: String, Codable {
    case waiting = "–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
    case fulfilled = "–ò—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å"
    case unfulfilled = "–ù–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å"
}

public struct Askeza: Identifiable, Codable, Hashable {
    public let id: UUID
    public let title: String
    public var intention: String?
    public var startDate: Date
    public var duration: AskezaDuration
    public var progress: Int
    public var isCompleted: Bool
    public var category: AskezaCategory
    public var wish: String?
    public var wishStatus: WishStatus?
    public var templateID: UUID?
    public var isInCompletedList: Bool = false
    
    public init(id: UUID = UUID(),
                title: String,
                intention: String? = nil,
                startDate: Date = Date(),
                duration: AskezaDuration,
                progress: Int = 0,
                isCompleted: Bool = false,
                category: AskezaCategory = .custom,
                wish: String? = nil,
                wishStatus: WishStatus? = nil,
                templateID: UUID? = nil,
                isInCompletedList: Bool = false) {
        self.id = id
        self.title = title
        self.intention = intention
        self.startDate = startDate
        self.duration = duration
        self.progress = progress
        self.isCompleted = isCompleted
        self.category = category
        self.wish = wish
        self.wishStatus = wishStatus
        self.templateID = templateID
        self.isInCompletedList = isInCompletedList
        
        // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üìù Askeza - –°–æ–∑–¥–∞–Ω–∞: \(title), ID: \(id), templateID: \(templateID?.uuidString ?? "–Ω–µ—Ç")")
    }
    
    // –Ø–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Hashable
    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    public static func == (lhs: Askeza, rhs: Askeza) -> Bool {
        return lhs.id == rhs.id
    }
    
    // –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    public var durationString: String {
        switch duration {
        case .days(let days):
            return "\(days) \(days.daysString)"
        case .lifetime:
            return "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ"
        }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
    public var daysPracticed: Int {
        let calendar = Calendar.current
        let startDateOnly = calendar.startOfDay(for: startDate)
        let currentDateOnly = calendar.startOfDay(for: Date())
        
        let components = calendar.dateComponents([.day], from: startDateOnly, to: currentDateOnly)
        return components.day ?? 0
    }
    
    // –í—ã—á–∏—Å–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Å–∫–µ–∑–∞ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–π
    public var isLifetime: Bool {
        if case .lifetime = duration {
            return true
        }
        return false
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞—Å–∫–µ–∑—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    public var totalDays: Int {
        switch duration {
        case .days(let days):
            return days
        case .lifetime:
            return 0 // 0 –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É
        }
    }
    
    public var daysLeft: Int? {
        switch duration {
        case .days(let total):
            return max(0, total - progress)
        case .lifetime:
            return nil
        }
    }
    
    public var progressPercentage: Double {
        switch duration {
        case .days(let total):
            return min(1.0, Double(progress) / Double(total))
        case .lifetime:
            return 0
        }
    }
}

public enum AskezaCategory: String, Codable, CaseIterable, Identifiable {
    case telo = "–¢–µ–ª–æ"
    case um = "–£–º"
    case dukh = "–î—É—Ö"
    case otnosheniya = "–û—Ç–Ω–æ—à–µ–Ω–∏—è"
    case osvobozhdenie = "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    case velikie = "–í–µ–ª–∏–∫–∏–µ"
    case custom = "–°–≤–æ—è"
    
    public var id: String { rawValue }
    
    public var systemImage: String {
        switch self {
        case .osvobozhdenie:
            return "wineglass"
        case .telo:
            return "figure.strengthtraining.traditional"
        case .um:
            return "brain"
        case .dukh:
            return "sparkles"
        case .otnosheniya:
            return "heart"
        case .velikie:
            return "crown"
        case .custom:
            return "star"
        }
    }
    
    var mainColor: Color {
        switch self {
        case .telo:            return Color("TeloColor")
        case .um:              return Color("UmColor")
        case .dukh:            return Color("DukhColor")
        case .otnosheniya:     return Color("OtnosheniyaColor")
        case .osvobozhdenie:   return Color("OsvobozhdenieColor")
        case .velikie:         return Color("VelikieColor")
        case .custom:          return Color("CustomColor")
        }
    }
    
    var accentColor: Color {
        // –í—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–∞–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return mainColor.opacity(0.7)
    }
    
    var gradient: LinearGradient {
        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å–ø–ª–æ—à–Ω—ã–º —Ü–≤–µ—Ç–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        LinearGradient(
            colors: [mainColor, mainColor],
            startPoint: .top,
            endPoint: .bottom
        )
    }
    
    public var color: Color {
        return mainColor
    }
} 