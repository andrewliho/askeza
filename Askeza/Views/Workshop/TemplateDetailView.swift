import SwiftUI
import SwiftData
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º ShareSheet
// –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ —Ç–æ–º –∂–µ –º–æ–¥—É–ª–µ
// import Common

// MARK: - View State
class TemplateDetailViewState: ObservableObject {
    @Published var showError = false
    @Published var errorMessage = ""
    @Published var showConfirmationDialog = false
}

struct TemplateDetailView: View {
    let template: PracticeTemplate
    @ObservedObject var templateStore: PracticeTemplateStore
    @StateObject private var state = TemplateDetailViewState()
    @Environment(\.dismiss) private var dismiss
    @State private var showingShareSheet = false
    @State private var shareText = ""
    @State private var isDataLoaded = false
    @State private var mutableTemplate: PracticeTemplate
    
    init(template: PracticeTemplate, templateStore: PracticeTemplateStore) {
        self.template = template
        self.templateStore = templateStore
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mutableTemplate –∫–æ–ø–∏–µ–π –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        _mutableTemplate = State(initialValue: template)
    }
    
    var body: some View {
        NavigationView {
            ZStack {
                AskezaTheme.backgroundColor
                    .ignoresSafeArea()
                
                if isDataLoaded {
                    ScrollView {
                        VStack(alignment: .leading, spacing: 24) {
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                            headerSection
                            
                            // –¶–∏—Ç–∞—Ç–∞
                            quoteSection
                            
                            // –î–µ—Ç–∞–ª–∏
                            detailsSection
                            
                            // –ü—Ä–æ–≥—Ä–µ—Å—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
                            if let progress = templateStore.getProgress(forTemplateID: mutableTemplate.id) {
                                progressSection(progress)
                            }
                            
                            // –û—Ç–∑—ã–≤—ã (—Å–∫—Ä—ã—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–ª–∏–∑–µ)
                            // reviewsSection
                            
                            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                            actionButtons
                        }
                        .padding(.bottom, 50)
                        .background(AskezaTheme.backgroundColor)
                    }
                    .background(AskezaTheme.backgroundColor)
                } else {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    ProgressView("–ó–∞–≥—Ä—É–∑–∫–∞...")
                        .foregroundColor(AskezaTheme.textColor)
                        .padding(50)
                        .background(AskezaTheme.backgroundColor)
                }
            }
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") {
                        dismiss()
                    }
                    .foregroundColor(AskezaTheme.accentColor)
                }
                
                ToolbarItem(placement: .principal) {
                    VStack {
                        Text("–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è")
                            .font(.headline)
                            .foregroundColor(AskezaTheme.textColor)
                        
                        Text(mutableTemplate.category.rawValue)
                            .font(.caption)
                            .foregroundColor(AskezaTheme.secondaryTextColor)
                    }
                }
            }
            .sheet(isPresented: $showingShareSheet) {
                ShareSheet(activityItems: [shareText])
            }
            .onAppear {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                loadData()
            }
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    private func loadData() {
        print("üîç TemplateDetailView - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞: \(mutableTemplate.title)")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º special cases
        handleSpecialTemplates()
        
        // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∫–∞–∑–∞ UI, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–∑–∞–≤–∏—Å–∞–Ω–∏—è"
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.15) {
            if !self.isDataLoaded {
                self.isDataLoaded = true
                print("‚ö†Ô∏è TemplateDetailView - –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤–æ–≤—Ä–µ–º—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º UI")
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞–±–ª–æ–Ω–∞
        if let progress = templateStore.getProgress(forTemplateID: mutableTemplate.id) {
            print("‚úÖ TemplateDetailView - –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: \(progress.daysCompleted) –¥–Ω–µ–π")
            isDataLoaded = true
        } else {
            print("üîç TemplateDetailView - –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ templateId")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if let template = templateStore.getTemplate(byTemplateId: mutableTemplate.templateId) {
                print("‚úÖ TemplateDetailView - –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω –ø–æ templateId")
                if mutableTemplate.id != template.id {
                    mutableTemplate = template
                    print("üîÑ TemplateDetailView - –û–±–Ω–æ–≤–ª–µ–Ω ID —à–∞–±–ª–æ–Ω–∞")
                }
                isDataLoaded = true
            } else {
                print("‚ö†Ô∏è TemplateDetailView - –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ ID, –Ω–∏ –ø–æ templateId")
                isDataLoaded = true // –í—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º UI
            }
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    private func handleSpecialTemplates() {
        // –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å
        if mutableTemplate.title.contains("—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞") || mutableTemplate.title.contains("digital detox") {
            mutableTemplate.templateId = "digital-detox-7"
            ensureDigitalDetoxExists()
        }
        
        // –î—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if mutableTemplate.title.contains("–ì–æ–¥ –∂–µ–ª–µ–∑–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã") {
            mutableTemplate.templateId = "365-days-discipline"
        }
    }
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞
    private func ensureDigitalDetoxExists() {
        if templateStore.getTemplate(byTemplateId: "digital-detox-7") == nil {
            print("‚ö†Ô∏è TemplateDetailView - –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞")
            
            let digitalDetox = PracticeTemplate(
                templateId: "digital-detox-7",
                title: "7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞",
                category: .osvobozhdenie,
                duration: 7,
                quote: "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å.",
                difficulty: 2,
                description: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–æ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
                intention: "–í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤–æ–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º"
            )
            
            templateStore.addTemplate(digitalDetox)
        }
    }
    
    // MARK: - Sections
    
    private var headerSection: some View {
        VStack(alignment: .center, spacing: 16) {
            // –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
            let status = templateStore.getStatus(forTemplateID: mutableTemplate.id)
            
            if status != .notStarted {
                ZStack {
                    Circle()
                        .stroke(status.color.opacity(0.2), lineWidth: 8)
                        .frame(width: 120, height: 120)
                    
                    if status == .inProgress, let progress = templateStore.getProgress(forTemplateID: mutableTemplate.id) {
                        Circle()
                            .trim(from: 0, to: CGFloat(min(1.0, Double(progress.daysCompleted) / Double(mutableTemplate.duration))))
                            .stroke(status.color, lineWidth: 8)
                            .frame(width: 120, height: 120)
                            .rotationEffect(.degrees(-90))
                    }
                    
                    Image(systemName: status.icon)
                        .font(.system(size: 40))
                        .foregroundColor(status.color)
                }
                .padding(.bottom, 8)
            }
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text(mutableTemplate.title)
                .font(.title2)
                .fontWeight(.bold)
                .foregroundColor(AskezaTheme.textColor)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
            
            // –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            HStack {
                Image(systemName: mutableTemplate.category.systemImage)
                    .foregroundColor(mutableTemplate.category.mainColor)
                
                Text(mutableTemplate.category.rawValue)
                    .foregroundColor(AskezaTheme.secondaryTextColor)
            }
            
            // –°–ª–æ–∂–Ω–æ—Å—Ç—å
            difficultyView(level: mutableTemplate.difficulty)
                .padding(.top, 8)
        }
        .frame(maxWidth: .infinity)
        .padding()
        .background(AskezaTheme.buttonBackground)
        .cornerRadius(16)
        .padding(.horizontal)
    }
    
    private var quoteSection: some View {
        Text("\"\(mutableTemplate.quote)\"")
            .font(.system(size: 18, weight: .light, design: .serif))
            .italic()
            .foregroundColor(AskezaTheme.intentColor)
            .multilineTextAlignment(.center)
            .padding(.horizontal, 40)
            .padding(.vertical, 20)
            .frame(maxWidth: .infinity)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(AskezaTheme.buttonBackground.opacity(0.5))
            )
            .padding(.horizontal)
    }
    
    private var detailsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            detailRow(title: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", value: durationText(mutableTemplate.duration))
            detailRow(title: "–°–ª–æ–∂–Ω–æ—Å—Ç—å:", value: difficultyText(mutableTemplate.difficulty))
            
            Text("–û–ø–∏—Å–∞–Ω–∏–µ")
                .font(.headline)
                .foregroundColor(AskezaTheme.textColor)
            
            Text(mutableTemplate.practiceDescription)
                .foregroundColor(AskezaTheme.secondaryTextColor)
                .fixedSize(horizontal: false, vertical: true)
            
            Text("–¶–µ–ª—å")
                .font(.headline)
                .foregroundColor(AskezaTheme.textColor)
            
            Text(mutableTemplate.intention)
                .foregroundColor(AskezaTheme.secondaryTextColor)
                .fixedSize(horizontal: false, vertical: true)
        }
        .padding()
        .background(AskezaTheme.buttonBackground)
        .cornerRadius(16)
        .padding(.horizontal)
    }
    
    private func progressSection(_ progress: TemplateProgress) -> some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å")
                .font(.headline)
                .foregroundColor(AskezaTheme.textColor)
            
            ProgressCardView(
                progress: progress,
                templateDuration: mutableTemplate.duration
            )
        }
        .padding()
        .background(AskezaTheme.buttonBackground)
        .cornerRadius(16)
        .padding(.horizontal)
    }
    
    private var actionButtons: some View {
        HStack {
            Button(action: {
                print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É'")
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∞—Å–∫–µ–∑—ã
                state.errorMessage = "–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞—Å–∫–µ–∑—É '\(mutableTemplate.title)' –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫?"
                state.showConfirmationDialog = true
            }) {
                Text(startButtonText)
                    .font(.headline)
                    .foregroundColor(.white)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(AskezaTheme.accentColor)
                    .cornerRadius(12)
            }
            .buttonStyle(PlainButtonStyle())
            .alert("–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É", isPresented: $state.showConfirmationDialog) {
                Button("–û—Ç–º–µ–Ω–∞", role: .cancel) {}
                Button("–î–æ–±–∞–≤–∏—Ç—å") {
                    // –°–æ–∑–¥–∞–µ–º –∞—Å–∫–µ–∑—É –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                    if let askeza = templateStore.startTemplate(mutableTemplate) {
                        print("‚úÖ TemplateDetailView: –°–æ–∑–¥–∞–Ω–∞ –∞—Å–∫–µ–∑–∞ \(askeza.title)")
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ async/await –∏ Task
                        NotificationCenter.default.post(
                            name: Notification.Name.refreshWorkshopData,
                            object: askeza
                        )
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        dismiss()
                    } else {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ - —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
                        state.errorMessage = "–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞—Å–∫–µ–∑—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                        state.showError = true
                    }
                }
            } message: {
                Text(state.errorMessage)
            }
            .alert("–í–Ω–∏–º–∞–Ω–∏–µ", isPresented: $state.showError) {
                Button("–û–ö", role: .cancel) {}
            } message: {
                Text(state.errorMessage)
            }
            
            Button(action: {
                print("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'")
                shareTemplate()
            }) {
                Image(systemName: "square.and.arrow.up")
                    .font(.headline)
                    .foregroundColor(AskezaTheme.accentColor)
                    .padding()
                    .background(AskezaTheme.buttonBackground)
                    .cornerRadius(12)
            }
            .buttonStyle(PlainButtonStyle())
        }
        .padding(.horizontal)
    }
    
    // MARK: - Helper Views
    
    private func detailRow(title: String, value: String) -> some View {
        HStack {
            Text(title)
                .font(.subheadline)
                .foregroundColor(AskezaTheme.textColor)
            
            Spacer()
            
            Text(value)
                .font(.subheadline)
                .foregroundColor(AskezaTheme.secondaryTextColor)
        }
    }
    
    private func difficultyView(level: Int) -> some View {
        HStack(spacing: 4) {
            Text("–°–ª–æ–∂–Ω–æ—Å—Ç—å:")
                .font(.subheadline)
                .foregroundColor(AskezaTheme.secondaryTextColor)
            
            HStack(spacing: 2) {
                ForEach(1...5, id: \.self) { i in
                    Image(systemName: i <= level ? "star.fill" : "star")
                        .font(.system(size: 12))
                        .foregroundColor(i <= level ? .yellow : Color.gray.opacity(0.2))
                }
            }
        }
    }
    
    // MARK: - Helper Methods
    
    private var startButtonText: String {
        let status = templateStore.getStatus(forTemplateID: mutableTemplate.id)
        switch status {
        case .notStarted:
            return "–ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É"
        case .inProgress:
            return "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        case .completed:
            return "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        case .mastered:
            return "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞"
        }
    }
    
    private func shareTemplate() {
        print("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞")
        shareText = """
        üßò‚Äç‚ôÇÔ∏è –ê—Å–∫–µ–∑–∞: \(mutableTemplate.title)
        üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(mutableTemplate.category.rawValue)
        ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(durationText(mutableTemplate.duration))
        ‚ú® –¶–∏—Ç–∞—Ç–∞: "\(mutableTemplate.quote)"
        
        #Askeza #\(mutableTemplate.category.rawValue) #–°–∞–º–æ–†–∞–∑–≤–∏—Ç–∏–µ
        """
        
        print("–¢–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞: \(shareText)")
        showingShareSheet = true
    }
    
    private func difficultyText(_ level: Int) -> String {
        switch level {
        case 1:
            return "‚òÖ"
        case 2:
            return "‚òÖ‚òÖ"
        case 3:
            return "‚òÖ‚òÖ‚òÖ"
        case 4:
            return "‚òÖ‚òÖ‚òÖ‚òÖ"
        case 5:
            return "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ"
        default:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    }
    
    private func durationText(_ days: Int) -> String {
        if days == 0 {
            return "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ"
        } else {
            return "\(days) –¥–Ω–µ–π"
        }
    }
    
    private func difficultyColor(level: Int) -> Color {
        switch level {
        case 1, 2:
            return .green
        case 3, 4:
            return .yellow
        case 5:
            return .red
        default:
            return .gray
        }
    }
    
    // MARK: - Actions
    
    // –ó–∞–ø—É—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫–∏
    private func startAction() {
        // ... existing code ...
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
    private func notifyTemplateCompletionUpdate() {
        print("üì¢ TemplateDetailView - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π
        NotificationCenter.default.post(
            name: .refreshWorkshopData,
            object: nil
        )
        
        // –ß—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            NotificationCenter.default.post(
                name: .refreshWorkshopData,
                object: nil
            )
        }
    }
}

struct ProgressCardView: View {
    let progress: TemplateProgress
    let templateDuration: Int
    
    var status: TemplateStatus {
        progress.status(templateDuration: templateDuration)
    }
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Image(systemName: status.icon)
                    .foregroundColor(status.color)
                
                Text("–°—Ç–∞—Ç—É—Å: \(status == .inProgress ? "–ê–∫—Ç–∏–≤–Ω–∞—è" : status.rawValue)")
                    .foregroundColor(AskezaTheme.secondaryTextColor)
                
                Spacer()
                
                if status == .inProgress {
                    Text("\(Int(progressPercentage * 100))%")
                        .fontWeight(.medium)
                        .foregroundColor(status.color)
                }
            }
            
            if status == .inProgress {
                GeometryReader { geometry in
                    ZStack(alignment: .leading) {
                        Rectangle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(height: 8)
                            .cornerRadius(4)
                        
                        Rectangle()
                            .fill(status.color)
                            .frame(width: geometry.size.width * progressPercentage, height: 8)
                            .cornerRadius(4)
                    }
                }
                .frame(height: 8)
                .padding(.vertical, 4)
            }
            
            Text("–î–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: \(progress.daysCompleted)\(templateDuration > 0 ? " –∏–∑ \(templateDuration)" : "")")
                .foregroundColor(AskezaTheme.secondaryTextColor)
            
            if progress.currentStreak > 0 {
                HStack {
                    Text("–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è:")
                        .foregroundColor(AskezaTheme.secondaryTextColor)
                    
                    Text("\(progress.currentStreak) –¥–Ω–µ–π")
                        .foregroundColor(.orange)
                    
                    Image(systemName: "flame.fill")
                        .foregroundColor(.orange)
                }
            }
            
            if progress.bestStreak > 0 {
                Text("–õ—É—á—à–∞—è —Å–µ—Ä–∏—è: \(progress.bestStreak) –¥–Ω–µ–π")
                    .foregroundColor(AskezaTheme.secondaryTextColor)
            }
            
            if progress.timesCompleted > 0 {
                Text("–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ä–∞–∑: \(progress.timesCompleted)")
                    .foregroundColor(AskezaTheme.secondaryTextColor)
            }
        }
    }
    
    private var progressPercentage: Double {
        if templateDuration <= 0 {
            return progress.daysCompleted > 0 ? 1.0 : 0.0
        }
        return min(1.0, Double(progress.daysCompleted) / Double(templateDuration))
    }
}

#Preview {
    let template = PracticeTemplate(
        templateId: "cold-shower-14",
        title: "14-–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –¥—É—à–∞",
        category: .telo,
        duration: 14,
        quote: "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –º–∞—Ç—å —Å–≤–æ–±–æ–¥—ã.",
        difficulty: 2,
        description: "–ü–æ–±–µ–¥–∞ –Ω–∞–¥ –∫–æ–º—Ñ–æ—Ä—Ç–æ–º –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ. –ù–∞—á–Ω–∏—Ç–µ —Å 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è.",
        intention: "–£–∫—Ä–µ–ø–∏—Ç—å —Å–∏–ª—É –≤–æ–ª–∏ –∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç"
    )
    
    return TemplateDetailView(
        template: template,
        templateStore: PracticeTemplateStore.shared
    )
} 