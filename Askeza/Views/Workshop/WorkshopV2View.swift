import SwiftUI
import SwiftData

// –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
class WorkshopStateManager: ObservableObject {
    @Published var searchText: String = ""
    @Published var selectedCategory: AskezaCategory? = nil
    @Published var selectedDifficulty: Int? = nil
    @Published var selectedDuration: Int? = nil
    @Published var showingFilters = false
    @Published var showingOnboarding = false
    
    let templateStore = PracticeTemplateStore.shared
    
    func resetFilters() {
        selectedCategory = nil
        selectedDifficulty = nil
        selectedDuration = nil
        searchText = ""
    }
    
    func ensureDigitalDetoxExists() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞
        if UserDefaults.standard.bool(forKey: "digitalDetoxTemplateCreated") {
            print("‚úÖ WorkshopV2View - –®–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Ä–∞–Ω–µ–µ")
            return
        }
        
        print("üîç WorkshopV2View - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —à–∞–±–ª–æ–Ω
        if templateStore.getTemplate(byTemplateId: "digital-detox-7") == nil {
            print("‚ö†Ô∏è WorkshopV2View - –®–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ")
            
            // –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
            let digitalDetoxUUID = UUID()
            print("üîë WorkshopV2View - –ù–∞–∑–Ω–∞—á–µ–Ω UUID –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞: \(digitalDetoxUUID)")
            
            let digitalDetox = PracticeTemplate(
                id: digitalDetoxUUID,
                templateId: "digital-detox-7",
                title: "7 –¥–Ω–µ–π —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞",
                category: .osvobozhdenie,
                duration: 7,
                quote: "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å.",
                difficulty: 2,
                description: "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–æ 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å.",
                intention: "–í–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–≤–æ–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º"
            )
            
            // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω
            templateStore.addTemplate(digitalDetox)
            print("‚úÖ WorkshopV2View - –®–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            
            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
            UserDefaults.standard.set(true, forKey: "digitalDetoxTemplateCreated")
        } else {
            print("‚úÖ WorkshopV2View - –®–∞–±–ª–æ–Ω —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
            UserDefaults.standard.set(true, forKey: "digitalDetoxTemplateCreated")
        }
    }
}

struct WorkshopV2View: View {
    @StateObject private var stateManager = WorkshopStateManager()
    
    var body: some View {
        NavigationStack {
            ZStack {
                AskezaTheme.backgroundColor
                    .ignoresSafeArea()
                
                VStack(spacing: 0) {
                    // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                    searchBar
                        .padding(.horizontal)
                        .padding(.vertical, 8)
                    
                    // –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    categoryFilters
                    
                    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫—É—Ä—Å—ã, –≥–∞–ª–µ—Ä–µ—è)
                    ScrollView {
                        LazyVStack(spacing: 24) {
                            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            // recommendationsSection
                            
                            // –ö—É—Ä—Å—ã-–ø—É—Ç–∏
                            pathsSection
                            
                            // –ì–∞–ª–µ—Ä–µ—è —à–∞–±–ª–æ–Ω–æ–≤
                            WorkshopGridView(
                                templateStore: stateManager.templateStore,
                                searchText: $stateManager.searchText,
                                selectedCategory: $stateManager.selectedCategory,
                                selectedDifficulty: $stateManager.selectedDifficulty,
                                selectedDuration: $stateManager.selectedDuration
                            )
                            .padding(.top, 8)
                        }
                        .padding(.bottom, 50)
                    }
                }
            }
            .navigationTitle("–ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        stateManager.showingFilters = true
                    }) {
                        Image(systemName: "line.3.horizontal.decrease.circle")
                            .foregroundColor(AskezaTheme.accentColor)
                    }
                }
            }
            .sheet(isPresented: $stateManager.showingFilters) {
                FilterSheetView(
                    selectedDifficulty: $stateManager.selectedDifficulty,
                    selectedDuration: $stateManager.selectedDuration,
                    onReset: stateManager.resetFilters
                )
            }
            .sheet(isPresented: $stateManager.showingOnboarding) {
                WorkshopOnboardingView()
            }
            .onAppear {
                // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —à–∞–±–ª–æ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                if !UserDefaults.standard.bool(forKey: "templatesAdded") {
                    AdditionalTemplates.addTemplates(to: stateManager.templateStore)
                    UserDefaults.standard.set(true, forKey: "templatesAdded")
                    print("‚úÖ WorkshopV2View - –ü–µ—Ä–≤–∏—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                }
                
                // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞
                stateManager.ensureDigitalDetoxExists()
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
                if !UserDefaults.standard.bool(forKey: "workshopOnboardingShown") {
                    stateManager.showingOnboarding = true
                    UserDefaults.standard.set(true, forKey: "workshopOnboardingShown")
                }
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Å–∫–µ–∑—ã
                NotificationCenter.default.addObserver(
                    forName: Notification.Name("AddAskezaNotification"),
                    object: nil,
                    queue: .main
                ) { [weak stateManager] _ in
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                        stateManager?.objectWillChange.send()
                    }
                }
            }
            .onDisappear {
                // –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø—Ä–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                NotificationCenter.default.removeObserver(self)
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è stateManager
    private var searchBar: some View {
        HStack {
            Image(systemName: "magnifyingglass")
                .foregroundColor(AskezaTheme.secondaryTextColor)
            
            TextField("–ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫...", text: $stateManager.searchText)
                .foregroundColor(AskezaTheme.textColor)
            
            if !stateManager.searchText.isEmpty {
                Button(action: {
                    stateManager.searchText = ""
                }) {
                    Image(systemName: "xmark.circle.fill")
                        .foregroundColor(AskezaTheme.secondaryTextColor)
                }
            }
        }
        .padding(10)
        .background(AskezaTheme.buttonBackground)
        .cornerRadius(12)
    }
    
    private var categoryFilters: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack(spacing: 12) {
                categoryButton(nil, text: "–í—Å–µ")
                
                ForEach(AskezaCategory.allCases.filter { $0 != .custom }, id: \.self) { category in
                    categoryButton(category, text: category.rawValue)
                }
            }
            .padding(.horizontal)
            .padding(.vertical, 8)
        }
    }
    
    private var recommendationsSection: some View {
        let recommendations = stateManager.templateStore.getRecommendedTemplates(limit: 3)
        
        return Group {
            if !recommendations.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    HStack {
                        Text("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–ª—è –≤–∞—Å")
                            .font(.headline)
                            .foregroundColor(AskezaTheme.textColor)
                            .padding(.horizontal)
                        
                        Spacer()
                        
                        Text("\(recommendations.count) —à–∞–±–ª–æ–Ω–æ–≤")
                            .font(.caption)
                            .foregroundColor(AskezaTheme.secondaryTextColor)
                    }
                    .padding(.horizontal)
                    
                    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 16) {
                            ForEach(recommendations) { template in
                                RecommendationCardWrapper(
                                    template: template,
                                    templateStore: stateManager.templateStore
                                )
                                .frame(width: 300, height: 240) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            }
                        }
                        .padding(.horizontal)
                        .padding(.bottom, 8) // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —Ç–µ–Ω–∏
                    }
                }
                .background(AskezaTheme.backgroundColor) // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ–Ω
            }
        }
    }
    
    private var pathsSection: some View {
        let courses = stateManager.templateStore.courses
        
        return Group {
            if !courses.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    sectionHeader("–ü—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è")
                    
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 16) {
                            ForEach(courses) { course in
                                CoursePathCardView(
                                    course: course,
                                    templateStore: stateManager.templateStore
                                )
                                .frame(width: 300)
                            }
                        }
                        .padding(.horizontal)
                    }
                }
            }
        }
    }
    
    // MARK: - Helper Views
    
    private func sectionHeader(_ title: String) -> some View {
        Text(title)
            .font(.headline)
            .foregroundColor(AskezaTheme.textColor)
            .padding(.horizontal)
    }
    
    private func categoryButton(_ category: AskezaCategory?, text: String) -> some View {
        Button(action: {
            if stateManager.selectedCategory == category {
                stateManager.selectedCategory = nil
            } else {
                stateManager.selectedCategory = category
            }
        }) {
            HStack(spacing: 6) {
                if let category = category {
                    Image(systemName: category.systemImage)
                        .font(.system(size: 14))
                        .foregroundColor(stateManager.selectedCategory == category ? .white : category.mainColor)
                }
                
                Text(text)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(stateManager.selectedCategory == category ? .white : AskezaTheme.textColor)
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 8)
            .background(
                RoundedRectangle(cornerRadius: 20)
                    .fill(stateManager.selectedCategory == category ? AskezaTheme.accentColor : AskezaTheme.buttonBackground)
            )
        }
    }
}

struct FilterSheetView: View {
    @Binding var selectedDifficulty: Int?
    @Binding var selectedDuration: Int?
    @Environment(\.dismiss) private var dismiss
    
    var onReset: () -> Void
    
    var body: some View {
        NavigationView {
            ZStack {
                AskezaTheme.backgroundColor
                    .ignoresSafeArea()
                
                VStack(spacing: 24) {
                    // –§–∏–ª—å—Ç—Ä –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    VStack(alignment: .leading, spacing: 12) {
                        Text("–°–ª–æ–∂–Ω–æ—Å—Ç—å")
                            .font(.headline)
                            .foregroundColor(AskezaTheme.textColor)
                        
                        VStack(spacing: 12) {
                            Text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
                                .font(.caption)
                                .foregroundColor(AskezaTheme.secondaryTextColor)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 16) {
                                difficultyButton(1, label: "‚òÖ")
                                difficultyButton(2, label: "‚òÖ‚òÖ")
                                difficultyButton(3, label: "‚òÖ‚òÖ‚òÖ")
                            }
                            HStack(spacing: 16) {
                                difficultyButton(4, label: "‚òÖ‚òÖ‚òÖ‚òÖ")
                                difficultyButton(5, label: "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ")
                            }
                        }
                    }
                    .padding()
                    .background(AskezaTheme.buttonBackground)
                    .cornerRadius(16)
                    
                    // –§–∏–ª—å—Ç—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    VStack(alignment: .leading, spacing: 12) {
                        Text("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                            .font(.headline)
                            .foregroundColor(AskezaTheme.textColor)
                        
                        VStack(spacing: 12) {
                            Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏:")
                                .font(.caption)
                                .foregroundColor(AskezaTheme.secondaryTextColor)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 16) {
                                durationButton(7, label: "7 –¥–Ω–µ–π")
                                durationButton(14, label: "14 –¥–Ω–µ–π")
                                durationButton(30, label: "30 –¥–Ω–µ–π")
                                durationButton(0, label: "‚àû")
                            }
                        }
                    }
                    .padding()
                    .background(AskezaTheme.buttonBackground)
                    .cornerRadius(16)
                    
                    Spacer()
                }
                .padding()
            }
            .navigationTitle("–§–∏–ª—å—Ç—Ä—ã")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–°–±—Ä–æ—Å–∏—Ç—å") {
                        onReset()
                    }
                    .foregroundColor(AskezaTheme.accentColor)
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("–ì–æ—Ç–æ–≤–æ") {
                        dismiss()
                    }
                    .foregroundColor(AskezaTheme.accentColor)
                }
            }
        }
    }
    
    private func difficultyButton(_ level: Int, label: String) -> some View {
        Button(action: {
            if selectedDifficulty == level {
                selectedDifficulty = nil
            } else {
                selectedDifficulty = level
            }
        }) {
            Text(label)
                .font(.subheadline)
                .foregroundColor(selectedDifficulty == level ? .white : AskezaTheme.textColor)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(selectedDifficulty == level ? AskezaTheme.accentColor : Color.gray.opacity(0.2))
                )
        }
    }
    
    private func durationButton(_ days: Int, label: String) -> some View {
        Button(action: {
            if selectedDuration == days {
                selectedDuration = nil
            } else {
                selectedDuration = days
            }
        }) {
            Text(label)
                .font(.subheadline)
                .foregroundColor(selectedDuration == days ? .white : AskezaTheme.textColor)
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(
                    RoundedRectangle(cornerRadius: 12)
                        .fill(selectedDuration == days ? AskezaTheme.accentColor : Color.gray.opacity(0.2))
                )
        }
    }
}

struct CoursePathCardView: View {
    let course: CoursePath
    let templateStore: PracticeTemplateStore
    
    @State private var showingCourseDetail = false
    
    var body: some View {
        Button(action: {
            print("CoursePathCardView: –ù–∞–∂–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø—É—Ç–∏: \(course.title)")
            showingCourseDetail = true
        }) {
            VStack(alignment: .leading, spacing: 12) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                HStack {
                    Image(systemName: course.category.systemImage)
                        .foregroundColor(course.category.mainColor)
                    
                    Text(course.title)
                        .font(.headline)
                        .foregroundColor(AskezaTheme.textColor)
                        .multilineTextAlignment(.leading)
                        .lineLimit(1) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                }
                
                // –û–ø–∏—Å–∞–Ω–∏–µ
                Text(course.courseDescription)
                    .font(.subheadline)
                    .foregroundColor(AskezaTheme.secondaryTextColor)
                    .lineLimit(2)
                
                // –®–∞–≥–∏ (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è)
                HStack(spacing: 4) {
                    ForEach(0..<course.templateIDs.count, id: \.self) { index in
                        let templateID = course.templateIDs[index]
                        let status = templateStore.getStatus(forTemplateID: templateID)
                        
                        ZStack {
                            Circle()
                                .fill(status.color)
                                .frame(width: 24, height: 24)
                            
                            Image(systemName: status.icon)
                                .font(.system(size: 12))
                                .foregroundColor(.white)
                        }
                        
                        if index < course.templateIDs.count - 1 {
                            Rectangle()
                                .fill(Color.gray.opacity(0.3))
                                .frame(height: 2)
                        }
                    }
                }
                .padding(.vertical, 8)
                
                // –°–ª–æ–∂–Ω–æ—Å—Ç—å
                HStack {
                    Text("–°–ª–æ–∂–Ω–æ—Å—Ç—å:")
                        .font(.caption)
                        .foregroundColor(AskezaTheme.secondaryTextColor)
                    
                    HStack(spacing: 2) {
                        ForEach(1...5, id: \.self) { i in
                            Image(systemName: i <= course.difficulty ? "star.fill" : "star")
                                .font(.system(size: 8))
                                .foregroundColor(i <= course.difficulty ? .yellow : Color.gray.opacity(0.3))
                        }
                    }
                }
            }
            .padding()
            .background(AskezaTheme.buttonBackground)
            .cornerRadius(16)
        }
        .buttonStyle(PlainButtonStyle()) // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        .sheet(isPresented: $showingCourseDetail) {
            CourseDetailView(course: course, templateStore: templateStore)
        }
    }
    
    private func difficultyColor(level: Int) -> Color {
        switch level {
        case 1, 2:
            return .green
        case 3, 4:
            return .yellow
        case 5:
            return .red
        default:
            return .gray
        }
    }
}

struct CourseDetailView: View {
    let course: CoursePath
    let templateStore: PracticeTemplateStore
    
    @Environment(\.dismiss) private var dismiss
    @State private var selectedTemplate: PracticeTemplate?
    @State private var showingTemplateDetail = false
    
    var body: some View {
        NavigationView {
            ZStack {
                AskezaTheme.backgroundColor
                    .ignoresSafeArea()
                
                ScrollView {
                    VStack(alignment: .leading, spacing: 24) {
                        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                        VStack(alignment: .center, spacing: 8) {
                            Text(course.title)
                                .font(.title2)
                                .fontWeight(.bold)
                                .foregroundColor(AskezaTheme.textColor)
                                .multilineTextAlignment(.center)
                                .padding(.horizontal)
                            
                            HStack {
                                Image(systemName: course.category.systemImage)
                                    .foregroundColor(course.category.mainColor)
                                
                                Text(course.category.rawValue)
                                    .foregroundColor(AskezaTheme.secondaryTextColor)
                            }
                            
                            // –°–ª–æ–∂–Ω–æ—Å—Ç—å
                            HStack(spacing: 4) {
                                Text("–°–ª–æ–∂–Ω–æ—Å—Ç—å:")
                                    .font(.caption)
                                    .foregroundColor(AskezaTheme.secondaryTextColor)
                                
                                ForEach(1...5, id: \.self) { i in
                                    Image(systemName: i <= course.difficulty ? "star.fill" : "star")
                                        .font(.system(size: 10))
                                        .foregroundColor(i <= course.difficulty ? .yellow : Color.gray.opacity(0.3))
                                }
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(AskezaTheme.buttonBackground)
                        .cornerRadius(16)
                        .padding(.horizontal)
                        
                        // –û–ø–∏—Å–∞–Ω–∏–µ
                        VStack(alignment: .leading, spacing: 8) {
                            Text("–û –ø—É—Ç–∏")
                                .font(.headline)
                                .foregroundColor(AskezaTheme.textColor)
                            
                            Text(course.courseDescription)
                                .foregroundColor(AskezaTheme.secondaryTextColor)
                        }
                        .padding()
                        .background(AskezaTheme.buttonBackground)
                        .cornerRadius(16)
                        .padding(.horizontal)
                        
                        // –®–∞–≥–∏
                        VStack(alignment: .leading, spacing: 8) {
                            Text("–®–∞–≥–∏")
                                .font(.headline)
                                .foregroundColor(AskezaTheme.textColor)
                                .padding(.horizontal)
                            
                            VStack(spacing: 16) {
                                ForEach(course.templateIDs, id: \.self) { templateID in
                                    if let template = templateStore.getTemplate(byID: templateID) {
                                        CourseStepView(
                                            template: template,
                                            progress: templateStore.getProgress(forTemplateID: templateID),
                                            onTap: {
                                                selectedTemplate = template
                                                showingTemplateDetail = true
                                            }
                                        )
                                    }
                                }
                            }
                            .padding(.horizontal)
                        }
                    }
                    .padding(.vertical)
                }
                .navigationBarTitleDisplayMode(.inline)
                .toolbar {
                    ToolbarItem(placement: .navigationBarLeading) {
                        Button("–ó–∞–∫—Ä—ã—Ç—å") {
                            dismiss()
                        }
                        .foregroundColor(AskezaTheme.accentColor)
                    }
                    
                    ToolbarItem(placement: .principal) {
                        Text("–ü—É—Ç—å")
                            .font(.headline)
                            .foregroundColor(AskezaTheme.textColor)
                    }
                }
                .sheet(isPresented: $showingTemplateDetail) {
                    if let template = selectedTemplate {
                        TemplateDetailView(
                            template: template,
                            templateStore: templateStore
                        )
                        .onAppear {
                            // –ü—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ sheet, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            print("üîç CourseDetailView - onAppear –≤—ã–∑–≤–∞–Ω –¥–ª—è sheet —Å —à–∞–±–ª–æ–Ω–æ–º: \(template.title)")
                            
                            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
                            templateStore.preloadTemplateData(for: template.templateId)
                            
                            // –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ digital-detox-7 –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                            if template.templateId == "digital-detox-7" || template.title.contains("—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞") {
                                print("‚ö†Ô∏è CourseDetailView - –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å–æ–±—ã–π —à–∞–±–ª–æ–Ω: —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å")
                                
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                                    print("üîÑ CourseDetailView - –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞")
                                    templateStore.preloadTemplateData(for: "digital-detox-7")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    private func difficultyColor(level: Int) -> Color {
        switch level {
        case 1, 2:
            return .green
        case 3, 4:
            return .yellow
        case 5:
            return .red
        default:
            return .gray
        }
    }
}

struct CourseStepView: View {
    let template: PracticeTemplate
    let progress: TemplateProgress?
    let onTap: () -> Void
    
    var status: TemplateStatus {
        if let progress = progress {
            return progress.status(templateDuration: template.duration)
        }
        return .notStarted
    }
    
    var body: some View {
        Button(action: {
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞
            print("üîç CourseStepView - –í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: \(template.title), ID: \(template.templateId)")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è digital-detox-7
            if template.templateId == "digital-detox-7" || template.title.contains("—Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –¥–µ—Ç–æ–∫—Å–∞") {
                print("‚ö†Ô∏è CourseStepView - –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Å–æ–±—ã–π —à–∞–±–ª–æ–Ω: —Ü–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å")
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    onTap()
                }
            } else {
                onTap()
            }
        }) {
            HStack(spacing: 16) {
                // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                ZStack {
                    Circle()
                        .fill(status.color.opacity(0.2))
                        .frame(width: 40, height: 40)
                    
                    Image(systemName: status.icon)
                        .font(.system(size: 20))
                        .foregroundColor(status.color)
                }
                
                VStack(alignment: .leading, spacing: 4) {
                    Text(template.title)
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .foregroundColor(AskezaTheme.textColor)
                        .lineLimit(1)
                    
                    Text("\(template.duration) –¥–Ω–µ–π ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: \(difficultyText(template.difficulty))")
                        .font(.caption)
                        .foregroundColor(AskezaTheme.secondaryTextColor)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .foregroundColor(AskezaTheme.secondaryTextColor)
            }
            .padding()
            .background(AskezaTheme.buttonBackground)
            .cornerRadius(12)
        }
        .buttonStyle(PlainButtonStyle())
    }
    
    private func difficultyText(_ level: Int) -> String {
        switch level {
        case 1:
            return "‚òÖ"
        case 2:
            return "‚òÖ‚òÖ"
        case 3:
            return "‚òÖ‚òÖ‚òÖ"
        case 4:
            return "‚òÖ‚òÖ‚òÖ‚òÖ"
        case 5:
            return "‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ"
        default:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        }
    }
}

struct WorkshopOnboardingView: View {
    @Environment(\.dismiss) private var dismiss
    @State private var currentPage = 0
    
    let pages = [
        OnboardingPage(
            title: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ú–∞—Å—Ç–µ—Ä—Å–∫—É—é!",
            description: "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è —Å–∞–º–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è.",
            imageName: "sparkles"
        ),
        OnboardingPage(
            title: "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å",
            description: "–í–∏–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–µ—Ä–∏–µ–π.",
            imageName: "flame.fill"
        ),
        OnboardingPage(
            title: "–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –ü—É—Ç–∏",
            description: "–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏.",
            imageName: "map"
        )
    ]
    
    var body: some View {
        ZStack {
            AskezaTheme.backgroundColor
                .ignoresSafeArea()
            
            VStack {
                // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                HStack(spacing: 8) {
                    ForEach(0..<pages.count, id: \.self) { index in
                        Circle()
                            .fill(currentPage == index ? AskezaTheme.accentColor : Color.gray.opacity(0.3))
                            .frame(width: 8, height: 8)
                    }
                }
                .padding(.top, 20)
                
                // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                TabView(selection: $currentPage) {
                    ForEach(0..<pages.count, id: \.self) { index in
                        onboardingView(for: pages[index])
                            .tag(index)
                    }
                }
                .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never))
                
                // –ö–Ω–æ–ø–∫–∏
                HStack {
                    if currentPage > 0 {
                        Button("–ù–∞–∑–∞–¥") {
                            withAnimation {
                                currentPage -= 1
                            }
                        }
                        .foregroundColor(AskezaTheme.accentColor)
                    } else {
                        Spacer()
                    }
                    
                    Spacer()
                    
                    if currentPage < pages.count - 1 {
                        Button("–î–∞–ª–µ–µ") {
                            withAnimation {
                                currentPage += 1
                            }
                        }
                        .foregroundColor(AskezaTheme.accentColor)
                    } else {
                        Button("–ù–∞—á–∞—Ç—å") {
                            dismiss()
                        }
                        .foregroundColor(AskezaTheme.accentColor)
                        .fontWeight(.bold)
                    }
                }
                .padding(.horizontal, 40)
                .padding(.bottom, 40)
            }
        }
    }
    
    private func onboardingView(for page: OnboardingPage) -> some View {
        VStack(spacing: 30) {
            Image(systemName: page.imageName)
                .resizable()
                .aspectRatio(contentMode: .fit)
                .frame(width: 120, height: 120)
                .foregroundColor(AskezaTheme.accentColor)
                .padding(.top, 60)
            
            Text(page.title)
                .font(.title2)
                .fontWeight(.bold)
                .foregroundColor(AskezaTheme.textColor)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
            
            Text(page.description)
                .font(.body)
                .foregroundColor(AskezaTheme.secondaryTextColor)
                .multilineTextAlignment(.center)
                .padding(.horizontal, 40)
            
            Spacer()
        }
    }
}

struct OnboardingPage {
    let title: String
    let description: String
    let imageName: String
}

// –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
struct RecommendationCardWrapper: View {
    let template: PracticeTemplate
    let templateStore: PracticeTemplateStore
    
    @State private var showingTemplateDetail = false
    @State private var showingShareSheet = false
    @State private var shareText: String = ""
    @State private var errorMessage: String = ""
    @State private var showError = false
    
    var body: some View {
        Button(action: {
            print("RecommendationCardWrapper: –ù–∞–∂–∞—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: \(template.title)")
            showingTemplateDetail = true
        }) {
            ZStack {
                // –§–æ–Ω –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                RoundedRectangle(cornerRadius: 16)
                    .fill(
                        LinearGradient(
                            gradient: Gradient(
                                colors: [
                                    template.category.mainColor.opacity(0.1),
                                    AskezaTheme.buttonBackground
                                ]
                            ),
                            startPoint: .top,
                            endPoint: .bottom
                        )
                    )
                
                VStack(alignment: .leading, spacing: 12) {
                    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    HStack {
                        // –ò–∫–æ–Ω–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                        Image(systemName: template.category.systemImage)
                            .font(.system(size: 24))
                            .foregroundColor(template.category.mainColor)
                            .frame(width: 36, height: 36)
                            .background(template.category.mainColor.opacity(0.2))
                            .cornerRadius(8)
                        
                        VStack(alignment: .leading, spacing: 4) {
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                            Text(template.title)
                                .font(.headline)
                                .foregroundColor(AskezaTheme.textColor)
                                .lineLimit(1)
                            
                            // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –¥–Ω–∏
                            HStack {
                                Text(template.category.rawValue)
                                    .font(.caption)
                                    .foregroundColor(AskezaTheme.secondaryTextColor)
                                
                                Text("‚Ä¢")
                                    .foregroundColor(AskezaTheme.secondaryTextColor)
                                
                                Text(durationText(template.duration))
                                    .font(.caption)
                                    .foregroundColor(AskezaTheme.secondaryTextColor)
                            }
                        }
                        
                        Spacer()
                        
                        // –°–ª–æ–∂–Ω–æ—Å—Ç—å - –∑–≤–µ–∑–¥—ã
                        HStack(spacing: 2) {
                            ForEach(1...5, id: \.self) { i in
                                Image(systemName: i <= template.difficulty ? "star.fill" : "star")
                                    .font(.system(size: 10))
                                    .foregroundColor(i <= template.difficulty ? .yellow : Color.gray.opacity(0.3))
                            }
                        }
                    }
                    
                    // –¶–∏—Ç–∞—Ç–∞
                    Text("\"\(template.quote)\"")
                        .font(.system(size: 14, weight: .light, design: .serif))
                        .italic()
                        .lineLimit(2)
                        .foregroundColor(AskezaTheme.intentColor)
                        .padding(.horizontal, 8)
                        .padding(.vertical, 6)
                        .frame(maxWidth: .infinity)
                        .background(AskezaTheme.buttonBackground.opacity(0.5))
                        .cornerRadius(8)
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if let progress = templateStore.getProgress(forTemplateID: template.id) {
                        progressView(progress)
                    }
                    
                    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                    HStack {
                        Button(action: {
                            print("RecommendationCardWrapper: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å' –¥–ª—è —à–∞–±–ª–æ–Ω–∞: \(template.title)")
                            if let askeza = templateStore.startTemplate(template) {
                                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Å–∫–µ–∑—ã —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
                                Task {
                                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º NotificationCenter –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—Å–∫–µ–∑—ã
                                    // –≠—Ç–æ –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –ª—é–±–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ NotificationCenter –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω
                                    NotificationCenter.default.post(
                                        name: Notification.Name("AddAskezaNotification"),
                                        object: askeza
                                    )
                                    print("RecommendationCardWrapper: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å–∫–µ–∑—ã: \(askeza.title)")
                                }
                            } else {
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω
                                errorMessage = "–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∞—Å–∫–µ–∑—É, –ø—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
                                showError = true
                            }
                        }) {
                            Text(startButtonText)
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.white)
                                .padding(.horizontal, 16)
                                .padding(.vertical, 8)
                                .background(AskezaTheme.accentColor)
                                .cornerRadius(8)
                        }
                        .buttonStyle(PlainButtonStyle())
                        .alert("–í–Ω–∏–º–∞–Ω–∏–µ", isPresented: $showError) {
                            Button("–û–ö", role: .cancel) {}
                        } message: {
                            Text(errorMessage)
                        }
                        
                        Spacer()
                        
                        Button(action: {
                            print("RecommendationCardWrapper: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è' –¥–ª—è —à–∞–±–ª–æ–Ω–∞: \(template.title)")
                            shareTemplate(template)
                        }) {
                            Image(systemName: "square.and.arrow.up")
                                .font(.system(size: 14))
                                .foregroundColor(AskezaTheme.accentColor)
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(Color.gray.opacity(0.1))
                                .cornerRadius(8)
                        }
                        .buttonStyle(PlainButtonStyle())
                    }
                }
                .padding()
            }
            .shadow(color: Color.black.opacity(0.1), radius: 3, x: 0, y: 2)
        }
        .buttonStyle(PlainButtonStyle())
        .sheet(isPresented: $showingTemplateDetail) {
            TemplateDetailView(
                template: template,
                templateStore: templateStore
            )
        }
        .sheet(isPresented: $showingShareSheet) {
            ShareSheet(activityItems: [shareText])
        }
    }
    
    private var startButtonText: String {
        let status = templateStore.getStatus(forTemplateID: template.id)
        switch status {
        case .notStarted: return "–ù–∞—á–∞—Ç—å"
        case .inProgress: return "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        case .completed: return "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å"
        case .mastered: return "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞"
        }
    }
    
    private func progressView(_ progress: TemplateProgress) -> some View {
        let status = progress.status(templateDuration: template.duration)
        let progressPercent = calculateProgressPercentage(progress)
        
        return VStack(alignment: .leading, spacing: 4) {
            HStack {
                // –°—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–æ–π
                Label(
                    title: { Text(status == .inProgress ? "–ê–∫—Ç–∏–≤–Ω–∞—è" : status.rawValue).font(.caption) },
                    icon: { Image(systemName: status.icon).font(.system(size: 10)) }
                )
                .foregroundColor(status.color)
                
                Spacer()
                
                // –ü—Ä–æ—Ü–µ–Ω—Ç
                if status == .inProgress {
                    Text("\(Int(progressPercent * 100))%")
                        .font(.caption.bold())
                        .foregroundColor(status.color)
                }
            }
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
            if status == .inProgress {
                GeometryReader { geometry in
                    ZStack(alignment: .leading) {
                        Rectangle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(height: 6)
                            .cornerRadius(3)
                        
                        Rectangle()
                            .fill(status.color)
                            .frame(width: geometry.size.width * progressPercent, height: 6)
                            .cornerRadius(3)
                    }
                }
                .frame(height: 6)
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–Ω–∏ –∏ —Å–µ—Ä–∏—é
                HStack {
                    Text("–î–µ–Ω—å \(progress.daysCompleted)\(template.duration > 0 ? " –∏–∑ \(template.duration)" : "")")
                        .font(.caption)
                        .foregroundColor(AskezaTheme.secondaryTextColor)
                    
                    Spacer()
                    
                    if progress.currentStreak > 0 {
                        HStack(spacing: 2) {
                            Text("–°–µ—Ä–∏—è: \(progress.currentStreak)")
                                .font(.caption)
                                .foregroundColor(.orange)
                            
                            Image(systemName: "flame.fill")
                                .font(.system(size: 10))
                                .foregroundColor(.orange)
                        }
                    }
                }
            }
        }
    }
    
    private func calculateProgressPercentage(_ progress: TemplateProgress) -> Double {
        guard template.duration > 0 else { return 0 }
        return min(1.0, Double(progress.daysCompleted) / Double(template.duration))
    }
    
    private func shareTemplate(_ template: PracticeTemplate) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ü–∏—Ç–∞—Ç—ã –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        let quote = template.quote.count > 50 ? template.quote.prefix(50) + "..." : template.quote
        
        shareText = """
        üßò‚Äç‚ôÇÔ∏è –ê—Å–∫–µ–∑–∞: \(template.title)
        üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: \(template.category.rawValue)
        ‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: \(durationText(template.duration))
        ‚ú® –¶–∏—Ç–∞—Ç–∞: "\(quote)"
        
        #Askeza #\(template.category.rawValue) #–°–∞–º–æ–†–∞–∑–≤–∏—Ç–∏–µ
        """
        
        print("RecommendationCardWrapper: –¢–µ–∫—Å—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")
        showingShareSheet = true
        print("RecommendationCardWrapper: –û—Ç–∫—Ä—ã–≤–∞–µ–º sheet –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞")
    }
    
    private func durationText(_ days: Int) -> String {
        if days == 0 {
            return "–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ"
        } else {
            return "\(days) –¥–Ω–µ–π"
        }
    }
}

#Preview {
    WorkshopV2View()
}